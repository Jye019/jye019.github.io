<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[imzeze Blog]]></title><description><![CDATA[imzeze Blog]]></description><link>https://gatsby-starter-blog-demo.netlify.app</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 08 Mar 2021 16:15:21 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[객체 복사]]></description><link>https://gatsby-starter-blog-demo.netlify.app/JS/shallow&amp;Deep/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/JS/shallow&amp;Deep/</guid><content:encoded>&lt;h1&gt;객체 복사&lt;/h1&gt;</content:encoded></item><item><title><![CDATA[JS 변수 메모리 할당]]></title><description><![CDATA[어떤 언어든지 메모리의 Lifecycle은  ->  ->  이다. 고수준 언어인 JS에서는 이 주기가 자동으로 작동한다. 객체가 생성되었을 때 메모리를 할당하고, 쓸모가 없어졌을 때 GC…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/JS/변수와 메모리/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/JS/변수와 메모리/</guid><pubDate>Tue, 09 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;어떤 언어든지 메모리의 Lifecycle은 &lt;code class=&quot;language-text&quot;&gt;할당&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;사용&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;해제&lt;/code&gt; 이다.&lt;br&gt;
고수준 언어인 JS에서는 이 주기가 자동으로 작동한다. 객체가 생성되었을 때 메모리를 할당하고, 쓸모가 없어졌을 때 GC의 대상이 된다. 이러한 자동 메모리 관리는 개발자에게 편의를 주지만, 메모리 관리는 항상 고려해야할 부분이다.   &lt;/p&gt;
&lt;br/&gt;  
&lt;h1&gt;메모리 할당&lt;/h1&gt;
&lt;p&gt;먼저 JS의 자료형에는 &lt;strong&gt;Primitive Type&lt;/strong&gt;과 &lt;strong&gt;Reference Type&lt;/strong&gt;이 있다.&lt;br&gt;
원시타입(Primitive Type)에는 &lt;code class=&quot;language-text&quot;&gt;Number, Boolean, null, undefined, String&lt;/code&gt; 5가지가 존재하며 참조타입(Reference Type)에는 &lt;code class=&quot;language-text&quot;&gt;Object, Array, function&lt;/code&gt;이 존재한다.   &lt;/p&gt;
&lt;p&gt;이 두 타입은 메모리 할당 시 다음의 차이점을 갖는다.   &lt;/p&gt;
&lt;h2&gt;Primitive Type&lt;/h2&gt;
&lt;p&gt;메모리 할당 시 고정된 크기로 할당된다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; number&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; boolean&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Boolean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; string&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;abc&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Number: 64Bit&lt;/li&gt;
&lt;li&gt;Boolean: 1Bit&lt;/li&gt;
&lt;li&gt;String: 한 문자 당 16Bit &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한, Primitive Type은 &lt;strong&gt;immutable&lt;/strong&gt;한 값이기 때문에 메모리 영역에서의 변경이 불가능 하다. 변경이 불가능하다는 것은 할당된 메모리의 value를 수정할 수 없고, 다른 메모리를 재할당할 수 있다는 것을 의미한다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; str&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;memory1&apos;&lt;/span&gt;
str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;memory2&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 &lt;code class=&quot;language-text&quot;&gt;str&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;memory1&lt;/code&gt;을 가진 Memory에서 &lt;code class=&quot;language-text&quot;&gt;memory2&lt;/code&gt;를 가진 다른 Memory를 가르키도록 변경되었다. &lt;/p&gt;
&lt;h2&gt;Reference Type&lt;/h2&gt;
&lt;p&gt;참조타입은 데이터의 &lt;strong&gt;위치 값&lt;/strong&gt;이 할당된다. 이 위치 값의 Object는 &lt;strong&gt;mutable&lt;/strong&gt;한 object이기 때문에 생성된 후 변경이 가능하다. (mutable object는 보통 데이터가 적재되는 Object, Array 등이 있다.) 따라서 원시타입과 달리 참조타입은 메모리 영역에서의 변경이 가능하며 객체 변경이 재할당을 의미하지 않는다.   &lt;/p&gt;
&lt;h2&gt;변수의 재사용 vs 새로 만들기&lt;/h2&gt;
&lt;p&gt;mutable 하다는 것은 개발에 자유도를 높여주지만 Side Effect를 발생시킬 위험이 있다. 때문에 immutable하게 쓰는 것의 장점이 극명하고, 함수형 프로그래밍 언어의 경우 변숫값 변경을 금지한다. 또한 새로 만드는 것이 메모리 사용량을 낮출 것이라고 생각할 수 있지만, immutable할 경우 메모리 주소가 불변하기 때문에 구조를 단순하게 유지할 수 있고 추론이 간단해져 메모리 사용량을 감소시킬 수 있다.&lt;/p&gt;
&lt;br/&gt; 
&lt;hr&gt;
&lt;h4&gt;Reference&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.javascript.info/variables&quot;&gt;변수와 상수&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management&quot;&gt;자바스크립트의 메모리관리&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://helloinyong.tistory.com/292&quot;&gt;자바스크립트 메모리 관리(Garbage Collection)에 대해 알아보자&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://poiemaweb.com/js-immutability&quot;&gt;객체와 변경불가성(Immutability)&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://medium.com/@yeon22/immutable%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-24aa152237e0&quot;&gt;Immutable을 사용하는 이유&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Apollo Server에서 File Upload 하는 방법]]></title><description><![CDATA[Apollo Server Apollo Server 2.x부터는 File upload를 하기 위해  모듈이 필요하다.  https://www.npmjs.com/package/graphql-upload Apollo sever는 기존에 default…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/GraphQL/FileUpload/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/GraphQL/FileUpload/</guid><pubDate>Wed, 03 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Apollo Server&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Apollo Server 2.x부터는 File upload를 하기 위해 &lt;code class=&quot;language-text&quot;&gt;graphql-upload&lt;/code&gt; 모듈이 필요하다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/graphql-upload&quot;&gt;https://www.npmjs.com/package/graphql-upload&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apollo sever는 기존에 default로 upload 기능을  지원하고 있었기 때문에 &lt;code class=&quot;language-text&quot;&gt;graphql-upload&lt;/code&gt;를 사용하기 위해서는 Apollo server를 생성할 때 &lt;code class=&quot;language-text&quot;&gt;uploads:false&lt;/code&gt; 옵션을 추가해야 한다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApolloServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  resolvers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  uploads&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...other Apollo Server Setting&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;  
&lt;h2&gt;Schema&lt;/h2&gt;
&lt;hr&gt;
&lt;br/&gt;  
&lt;h3&gt;typeDefs&lt;/h3&gt;
&lt;p&gt;file은 &lt;code class=&quot;language-text&quot;&gt;graphql-upload&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;FileUpload&lt;/code&gt; 타입으로 받고,
return type으로 &lt;code class=&quot;language-text&quot;&gt;UploadedFileResponse&lt;/code&gt;를 지정했다.&lt;br&gt;
또한 &lt;code class=&quot;language-text&quot;&gt;graphql-upload&lt;/code&gt;를 사용하기 위해 graphql의 &lt;code class=&quot;language-text&quot;&gt;scalar&lt;/code&gt; type으로 &lt;code class=&quot;language-text&quot;&gt;Upload&lt;/code&gt;를 추가해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; gql &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;apollo-server-express&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; GraphQLUpload&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FileUpload &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;graphql-upload&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; typeDefs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gql&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
	scalar Upload

	type UploadedFileResponse {
		filename: String!
		mimetype: String!
		encoding: String!
		path: String!
	}

	extend type Mutation {
		singleUpload(file: Upload!): UploadedFileResponse!
	}
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;h3&gt;resolver&lt;/h3&gt;
&lt;p&gt;resolver에도 &lt;code class=&quot;language-text&quot;&gt;Upload: GraphQLUpload&lt;/code&gt;을 추가한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resolvers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	Upload&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; GraphQLUpload&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	Mutation&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		singleUpload&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; unknown&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; file &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; file&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FileUpload &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Promise&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UploadedFileResponse&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token comment&quot;&gt;// 파일 업로드 구현 &lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; upload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fileHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;processUpload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; upload
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;h2&gt;util&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;파일을 디렉토리에 업로드하기 위해 &lt;code class=&quot;language-text&quot;&gt;fs&lt;/code&gt; 모듈을 사용한다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createWriteStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mkdir &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fs&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FileUpload &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;graphql-upload&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; type UploadedFileResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	filename&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string
	mimetype&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string
	encoding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string
	path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;storeUpload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;upload&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FileUpload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Promise&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UploadedFileResponse&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			upload
				&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createWriteStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;__dirname&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/../../../files/images/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;upload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filename&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;finish&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;upload&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/files/images/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;upload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filename&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processUpload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;upload&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FileUpload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Promise&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UploadedFileResponse&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;__dirname&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/../../../files/images/&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; recursive&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; err
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createReadStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mimetype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; upload

		&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; file &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; FileHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;storeUpload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createReadStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mimetype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; file
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h4&gt;reference&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/migration-file-uploads/&quot;&gt;File uploads in Node.js &amp;#x3C; v8.5.0&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.apollographql.com/blog/graphql-file-uploads-with-react-hooks-typescript-amazon-s3-tutorial-ef39d21066a2/&quot;&gt;☝️ GraphQL File Uploads with React Hooks, TypeScript &amp;#x26; Amazon S3 [Tutorial]&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>